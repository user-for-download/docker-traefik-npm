version: "3.9"

name: services

volumes:
    portainer_data: {}

networks:
  t2_proxy:
    name: t2_proxy
    external: true

  socket_proxy:
    name: socket_proxy
    external: true
 
services:
  # whoami
  whoami:
    image: containous/whoami
    container_name: whoami
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    command:
      - --port=8082 # Our service listens on 8082
    labels:
      traefik.enable: true
      traefik.http.routers.whoami-rtr.entrypoints: http
      traefik.http.routers.whoami-rtr.rule: Host(`$WHOAMI_DOMAINNAME`)
      traefik.http.routers.whoami-rtr.service: whoami-svc
      traefik.http.services.whoami-svc.loadbalancer.server.port: 8082
      #traefik.http.routers.whoami-rtr.middlewares: middlewares-authelia@file
      org.label-schema.group: "monitoring"

  # Portainer
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    command: -H tcp://socket-proxy:2375
    security_opt:
      - no-new-privileges:true
    restart: always
    networks:
      - t2_proxy
      - socket_proxy
    volumes:
      - portainer_data:/data
    environment:
      TZ: $TZ
    labels:
      traefik.enable: true
      traefik.http.routers.portainer-rtr.entrypoints: http
      traefik.http.routers.portainer-rtr.rule: Host(`$PORTAINER_DOMAINNAME`)
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: 9000
      #traefik.http.routers.portainer-rtr.middlewares: middlewares-authelia@file
      org.label-schema.group: "monitoring"